// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg/msg.proto

package msg

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConnType int32

const (
	SendingMsg     ConnType = 0
	SendingRequest ConnType = 1
)

var ConnType_name = map[int32]string{
	0: "SendingMsg",
	1: "SendingRequest",
}

var ConnType_value = map[string]int32{
	"SendingMsg":     0,
	"SendingRequest": 1,
}

func (ConnType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{0}
}

//Types of messages nodes can send to one another
type Type int32

const (
	Prepare    Type = 0
	Promise    Type = 1
	Propose    Type = 2
	Accept     Type = 3
	LearnerMsg Type = 4
	Commit     Type = 5
)

var Type_name = map[int32]string{
	0: "Prepare",
	1: "Promise",
	2: "Propose",
	3: "Accept",
	4: "LearnerMsg",
	5: "Commit",
}

var Type_value = map[string]int32{
	"Prepare":    0,
	"Promise":    1,
	"Propose":    2,
	"Accept":     3,
	"LearnerMsg": 4,
	"Commit":     5,
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{1}
}

//Data type used for inter-node communication
type Msg struct {
	Id         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Priority   int64   `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	Type       Type    `protobuf:"varint,3,opt,name=type,proto3,enum=msg.Type" json:"type,omitempty"`
	SlotIndex  int32   `protobuf:"varint,4,opt,name=slotIndex,proto3" json:"slotIndex,omitempty"`
	ProposerId int32   `protobuf:"varint,5,opt,name=proposerId,proto3" json:"proposerId,omitempty"`
	FromClient int32   `protobuf:"varint,6,opt,name=fromClient,proto3" json:"fromClient,omitempty"`
	Value      string  `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	PreviousId int64   `protobuf:"varint,8,opt,name=previousId,proto3" json:"previousId,omitempty"`
	Size_      []int64 `protobuf:"varint,9,rep,packed,name=size,proto3" json:"size,omitempty"`
}

func (m *Msg) Reset()      { *m = Msg{} }
func (*Msg) ProtoMessage() {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{0}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Msg) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Msg) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Prepare
}

func (m *Msg) GetSlotIndex() int32 {
	if m != nil {
		return m.SlotIndex
	}
	return 0
}

func (m *Msg) GetProposerId() int32 {
	if m != nil {
		return m.ProposerId
	}
	return 0
}

func (m *Msg) GetFromClient() int32 {
	if m != nil {
		return m.FromClient
	}
	return 0
}

func (m *Msg) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Msg) GetPreviousId() int64 {
	if m != nil {
		return m.PreviousId
	}
	return 0
}

func (m *Msg) GetSize_() []int64 {
	if m != nil {
		return m.Size_
	}
	return nil
}

//Data type for values stored in queue
type QueueRequest struct {
	Priority   int64  `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Value      string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	FromClient int32  `protobuf:"varint,3,opt,name=fromClient,proto3" json:"fromClient,omitempty"`
}

func (m *QueueRequest) Reset()      { *m = QueueRequest{} }
func (*QueueRequest) ProtoMessage() {}
func (*QueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{1}
}
func (m *QueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueRequest.Merge(m, src)
}
func (m *QueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueueRequest proto.InternalMessageInfo

func (m *QueueRequest) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *QueueRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *QueueRequest) GetFromClient() int32 {
	if m != nil {
		return m.FromClient
	}
	return 0
}

//Type used for sending information about a slot's value
type SlotValue struct {
	Type      Type   `protobuf:"varint,1,opt,name=type,proto3,enum=msg.Type" json:"type,omitempty"`
	SlotIndex int32  `protobuf:"varint,2,opt,name=slotIndex,proto3" json:"slotIndex,omitempty"`
	Value     string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *SlotValue) Reset()      { *m = SlotValue{} }
func (*SlotValue) ProtoMessage() {}
func (*SlotValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_d0f0a1b324c95b77, []int{2}
}
func (m *SlotValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlotValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlotValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlotValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlotValue.Merge(m, src)
}
func (m *SlotValue) XXX_Size() int {
	return m.Size()
}
func (m *SlotValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SlotValue.DiscardUnknown(m)
}

var xxx_messageInfo_SlotValue proto.InternalMessageInfo

func (m *SlotValue) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Prepare
}

func (m *SlotValue) GetSlotIndex() int32 {
	if m != nil {
		return m.SlotIndex
	}
	return 0
}

func (m *SlotValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("msg.ConnType", ConnType_name, ConnType_value)
	proto.RegisterEnum("msg.Type", Type_name, Type_value)
	proto.RegisterType((*Msg)(nil), "msg.Msg")
	proto.RegisterType((*QueueRequest)(nil), "msg.QueueRequest")
	proto.RegisterType((*SlotValue)(nil), "msg.SlotValue")
}

func init() { proto.RegisterFile("msg/msg.proto", fileDescriptor_d0f0a1b324c95b77) }

var fileDescriptor_d0f0a1b324c95b77 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0xf5, 0x78, 0xed, 0x5c, 0x3c, 0x40, 0x64, 0xad, 0x28, 0x56, 0x08, 0x56, 0x56, 0x2a, 0xeb,
	0x8a, 0x20, 0x41, 0x49, 0x05, 0xa9, 0x22, 0x71, 0x12, 0xf8, 0x80, 0x82, 0x02, 0x11, 0xce, 0x83,
	0xb5, 0x52, 0xec, 0x35, 0xbb, 0xeb, 0x13, 0xa1, 0xe2, 0x13, 0xf8, 0x0c, 0x3e, 0x85, 0x32, 0xe5,
	0x95, 0xc4, 0x69, 0x28, 0xaf, 0xa4, 0x44, 0x76, 0x42, 0x2e, 0xa4, 0xa2, 0xdb, 0xf7, 0xde, 0xe8,
	0xbd, 0x99, 0xd9, 0xc1, 0x3b, 0xa5, 0x2d, 0x1e, 0x96, 0xb6, 0x98, 0xd4, 0x46, 0x3b, 0xcd, 0x59,
	0x69, 0x8b, 0xf1, 0x6f, 0x40, 0x76, 0x66, 0x0b, 0x3e, 0x42, 0x5f, 0xe5, 0x02, 0x12, 0x48, 0x59,
	0xe6, 0xab, 0x9c, 0xdf, 0xc3, 0x61, 0x6d, 0x94, 0x36, 0xca, 0x2d, 0x85, 0xdf, 0xb3, 0x7b, 0xcc,
	0x1f, 0x60, 0xe0, 0x96, 0x35, 0x09, 0x96, 0x40, 0x3a, 0x7a, 0x14, 0x4d, 0x3a, 0xcb, 0x57, 0xcb,
	0x9a, 0xb2, 0x9e, 0xe6, 0xf7, 0x31, 0xb2, 0x0b, 0xed, 0x66, 0x55, 0x4e, 0x9f, 0x45, 0x90, 0x40,
	0x1a, 0x66, 0x37, 0x04, 0x97, 0x88, 0xb5, 0xd1, 0xb5, 0xb6, 0x64, 0x66, 0xb9, 0x08, 0x7b, 0xf9,
	0x80, 0xe9, 0xf4, 0x8f, 0x46, 0x97, 0xd3, 0x85, 0xa2, 0xca, 0x89, 0xc1, 0x56, 0xbf, 0x61, 0xf8,
	0x5d, 0x0c, 0x2f, 0xe7, 0x8b, 0x86, 0xc4, 0x49, 0x02, 0x69, 0x94, 0x6d, 0xc1, 0xd6, 0x95, 0x2e,
	0x95, 0x6e, 0xec, 0x2c, 0x17, 0xc3, 0xbe, 0xe1, 0x03, 0x86, 0x73, 0x0c, 0xac, 0xfa, 0x42, 0x22,
	0x4a, 0x58, 0xca, 0xb2, 0xfe, 0x3d, 0x7e, 0x8f, 0xb7, 0x5f, 0x36, 0xd4, 0x50, 0x46, 0x9f, 0x1a,
	0xb2, 0xee, 0x9f, 0x91, 0xe1, 0x68, 0xe4, 0x7d, 0xaa, 0x7f, 0x94, 0x7a, 0xd0, 0x2b, 0x3b, 0xee,
	0x75, 0xfc, 0x0e, 0xa3, 0xf3, 0x85, 0x76, 0x6f, 0xfa, 0xe2, 0xbf, 0x5b, 0x83, 0xff, 0xd8, 0x9a,
	0x7f, 0xbc, 0xb5, 0x7d, 0x3e, 0x3b, 0xc8, 0x3f, 0x9d, 0xe0, 0x70, 0xaa, 0xab, 0xaa, 0x73, 0xe1,
	0x23, 0xc4, 0x73, 0xaa, 0x72, 0x55, 0x15, 0x67, 0xb6, 0x88, 0x3d, 0xce, 0x71, 0xb4, 0xc3, 0xbb,
	0xf9, 0x62, 0x38, 0x7d, 0x8d, 0x41, 0x5f, 0x7b, 0x0b, 0x4f, 0x5e, 0x18, 0xaa, 0xe7, 0x86, 0x62,
	0x6f, 0x0b, 0x74, 0xa9, 0x2c, 0xc5, 0xb0, 0x03, 0xdd, 0x5f, 0xc4, 0x3e, 0x47, 0x1c, 0x3c, 0xbd,
	0xb8, 0xa0, 0xda, 0xc5, 0xac, 0xb3, 0x7f, 0x4e, 0x73, 0x53, 0x91, 0xe9, 0xec, 0x83, 0x4e, 0x9b,
	0xea, 0xb2, 0x54, 0x2e, 0x0e, 0x9f, 0x3d, 0x59, 0xad, 0xa5, 0x77, 0xb5, 0x96, 0xde, 0xf5, 0x5a,
	0xc2, 0xd7, 0x56, 0xc2, 0xf7, 0x56, 0xc2, 0x8f, 0x56, 0xc2, 0xaa, 0x95, 0xf0, 0xb3, 0x95, 0xf0,
	0xab, 0x95, 0xde, 0x75, 0x2b, 0xe1, 0xdb, 0x46, 0x7a, 0xab, 0x8d, 0xf4, 0xae, 0x36, 0xd2, 0x7b,
	0x1b, 0x4e, 0xba, 0x5b, 0xfc, 0x30, 0xe8, 0x8f, 0xf1, 0xf1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x6e, 0x0a, 0x11, 0xed, 0x9d, 0x02, 0x00, 0x00,
}

func (x ConnType) String() string {
	s, ok := ConnType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x Type) String() string {
	s, ok := Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Msg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Msg)
	if !ok {
		that2, ok := that.(Msg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.SlotIndex != that1.SlotIndex {
		return false
	}
	if this.ProposerId != that1.ProposerId {
		return false
	}
	if this.FromClient != that1.FromClient {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.PreviousId != that1.PreviousId {
		return false
	}
	if len(this.Size_) != len(that1.Size_) {
		return false
	}
	for i := range this.Size_ {
		if this.Size_[i] != that1.Size_[i] {
			return false
		}
	}
	return true
}
func (this *QueueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueueRequest)
	if !ok {
		that2, ok := that.(QueueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.FromClient != that1.FromClient {
		return false
	}
	return true
}
func (this *SlotValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SlotValue)
	if !ok {
		that2, ok := that.(SlotValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.SlotIndex != that1.SlotIndex {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *Msg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&msg.Msg{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "SlotIndex: "+fmt.Sprintf("%#v", this.SlotIndex)+",\n")
	s = append(s, "ProposerId: "+fmt.Sprintf("%#v", this.ProposerId)+",\n")
	s = append(s, "FromClient: "+fmt.Sprintf("%#v", this.FromClient)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "PreviousId: "+fmt.Sprintf("%#v", this.PreviousId)+",\n")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msg.QueueRequest{")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "FromClient: "+fmt.Sprintf("%#v", this.FromClient)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SlotValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&msg.SlotValue{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "SlotIndex: "+fmt.Sprintf("%#v", this.SlotIndex)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsg(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Size_) > 0 {
		dAtA2 := make([]byte, len(m.Size_)*10)
		var j1 int
		for _, num1 := range m.Size_ {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMsg(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	if m.PreviousId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.PreviousId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FromClient != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.FromClient))
		i--
		dAtA[i] = 0x30
	}
	if m.ProposerId != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.ProposerId))
		i--
		dAtA[i] = 0x28
	}
	if m.SlotIndex != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.SlotIndex))
		i--
		dAtA[i] = 0x20
	}
	if m.Type != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Priority != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromClient != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.FromClient))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Priority != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SlotValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlotValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlotValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SlotIndex != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.SlotIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintMsg(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMsg(uint64(m.Id))
	}
	if m.Priority != 0 {
		n += 1 + sovMsg(uint64(m.Priority))
	}
	if m.Type != 0 {
		n += 1 + sovMsg(uint64(m.Type))
	}
	if m.SlotIndex != 0 {
		n += 1 + sovMsg(uint64(m.SlotIndex))
	}
	if m.ProposerId != 0 {
		n += 1 + sovMsg(uint64(m.ProposerId))
	}
	if m.FromClient != 0 {
		n += 1 + sovMsg(uint64(m.FromClient))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.PreviousId != 0 {
		n += 1 + sovMsg(uint64(m.PreviousId))
	}
	if len(m.Size_) > 0 {
		l = 0
		for _, e := range m.Size_ {
			l += sovMsg(uint64(e))
		}
		n += 1 + sovMsg(uint64(l)) + l
	}
	return n
}

func (m *QueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Priority != 0 {
		n += 1 + sovMsg(uint64(m.Priority))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.FromClient != 0 {
		n += 1 + sovMsg(uint64(m.FromClient))
	}
	return n
}

func (m *SlotValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMsg(uint64(m.Type))
	}
	if m.SlotIndex != 0 {
		n += 1 + sovMsg(uint64(m.SlotIndex))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Msg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Msg{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`SlotIndex:` + fmt.Sprintf("%v", this.SlotIndex) + `,`,
		`ProposerId:` + fmt.Sprintf("%v", this.ProposerId) + `,`,
		`FromClient:` + fmt.Sprintf("%v", this.FromClient) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`PreviousId:` + fmt.Sprintf("%v", this.PreviousId) + `,`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueueRequest{`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`FromClient:` + fmt.Sprintf("%v", this.FromClient) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SlotValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SlotValue{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`SlotIndex:` + fmt.Sprintf("%v", this.SlotIndex) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsg(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIndex", wireType)
			}
			m.SlotIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerId", wireType)
			}
			m.ProposerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClient", wireType)
			}
			m.FromClient = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClient |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousId", wireType)
			}
			m.PreviousId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Size_ = append(m.Size_, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMsg
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMsg
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Size_) == 0 {
					m.Size_ = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMsg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Size_ = append(m.Size_, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromClient", wireType)
			}
			m.FromClient = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromClient |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlotValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlotValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlotValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIndex", wireType)
			}
			m.SlotIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
